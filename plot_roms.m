clear;clc;close all force;

figure;
rom_octspl = [0x5, 0x6, 0x8, 0x9, 0xA, 0xC, 0xD, 0xE,...
0x0, 0x1, 0x2, 0x4, 0x5, 0x6, 0x8, 0x9,...
0xA, 0xC, 0xD, 0xE, 0x0, 0x1, 0x2, 0x4,...
0x5, 0x6, 0x8, 0x9, 0xA, 0xC, 0xD, 0xE];

plot(rom_octspl);
title('Octave splitter ROM');

figure;
rom_expbase = [0x0000, 0x00F0, 0x01E0, 0x02D0, 0x03C0, 0x04B1, 0x05B0, 0x06A1,...
0x07A1, 0x08A0, 0x0991, 0x0A91, 0x0B92, 0x0CA1, 0x0DA1, 0x0EA2,...
0x0FB1, 0x10B2, 0x11C2, 0x12D2, 0x13E2, 0x14F2, 0x1612, 0x1722,...
0x1833, 0x1953, 0x1A73, 0x1B93, 0x1CB3, 0x1DD3, 0x1EF3, 0x2023,...
0x2144, 0x2273, 0x23A3, 0x24D4, 0x2604, 0x2734, 0x2874, 0x29A4,...
0x2AE4, 0x2C24, 0x2D64, 0x2EA4, 0x2FE5, 0x3125, 0x3275, 0x33B6,...
0x3506, 0x3656, 0x37A6, 0x3905, 0x3A56, 0x3BB6, 0x3D16, 0x3E67,...
0x3FD6, 0x4136, 0x4297, 0x4407, 0x4567, 0x46D7, 0x4848, 0x49C7,...
0x4B38, 0x4CB7, 0x4E28, 0x4FA8, 0x5128, 0x52B8, 0x5438, 0x55C8,...
0x5749, 0x58D9, 0x5A6A, 0x5C09, 0x5D9A, 0x5F3A, 0x60DA, 0x627A,...
0x641A, 0x65CA, 0x676B, 0x691B, 0x6ACB, 0x6C7B, 0x6E3B, 0x6FEC,...
0x71AC, 0x736C, 0x752C, 0x76FC, 0x78BD, 0x7A8D, 0x7C5D, 0x7E3C];

plot(rom_expbase);
title('Exponential base ROM');

figure;
rom_expint = [0x00, 0x02, 0x04, 0x06, 0x07, 0x09, 0x0B, 0x0D,...
0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E,...
0x00, 0x02, 0x04, 0x06, 0x09, 0x0B, 0x0D, 0x0F,...
0x00, 0x02, 0x05, 0x07, 0x09, 0x0B, 0x0E, 0x10,...
0x00, 0x02, 0x05, 0x07, 0x0A, 0x0C, 0x0F, 0x11,...
0x00, 0x03, 0x05, 0x08, 0x0A, 0x0D, 0x0F, 0x12,...
0x00, 0x03, 0x05, 0x08, 0x0B, 0x0E, 0x10, 0x13,...
0x00, 0x03, 0x06, 0x09, 0x0B, 0x0E, 0x11, 0x14,...
0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15,...
0x00, 0x03, 0x06, 0x09, 0x0D, 0x10, 0x13, 0x16,...
0x00, 0x03, 0x07, 0x0A, 0x0D, 0x10, 0x14, 0x17,...
0x00, 0x03, 0x07, 0x0A, 0x0E, 0x11, 0x15, 0x18,...
0x00, 0x04, 0x07, 0x0B, 0x0E, 0x12, 0x15, 0x19,...
0x00, 0x04, 0x07, 0x0B, 0x0F, 0x13, 0x16, 0x1A,...
0x00, 0x04, 0x08, 0x0C, 0x0F, 0x13, 0x17, 0x1B,...
0x00, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1C];

plot(rom_expint);
title('Exponential interpolation ROM');

figure;
rom_sinbase = [0x0003E, 0x0035E, 0x0067E, 0x0099E, 0x00CBF, 0x00FDF, 0x012FF, 0x0163D,...
0x0195E, 0x01C7E, 0x01F9E, 0x022BE, 0x025DE, 0x028FE, 0x02C1E, 0x02F3E,...
0x0325E, 0x0357E, 0x0389E, 0x03BBE, 0x03EDE, 0x041FE, 0x0451E, 0x0483E,...
0x04B5D, 0x04E5E, 0x0517E, 0x0549E, 0x057BE, 0x05ADD, 0x05DDE, 0x060FE,...
0x0641D, 0x0671E, 0x06A3D, 0x06D3E, 0x0705D, 0x0735E, 0x0767D, 0x0797E,...
0x07C9D, 0x07F9D, 0x0829E, 0x085BD, 0x088BD, 0x08BBD, 0x08EBD, 0x091BD,...
0x094BD, 0x097BD, 0x09ABD, 0x09DBD, 0x0A0BD, 0x0A3BD, 0x0A6BC, 0x0A9BC,...
0x0AC9D, 0x0AF9C, 0x0B29B, 0x0B57C, 0x0B87B, 0x0BB5C, 0x0BE3C, 0x0C13B,...
0x0C41C, 0x0C6FC, 0x0C9DC, 0x0CCBC, 0x0CF9C, 0x0D27C, 0x0D55B, 0x0D83B,...
0x0DB1B, 0x0DDDB, 0x0E0BB, 0x0E37C, 0x0E65B, 0x0E91B, 0x0EBFA, 0x0EEBA,...
0x0F17B, 0x0F43B, 0x0F6FB, 0x0F9BB, 0x0FC7A, 0x0FF3A, 0x101FA, 0x1049A,...
0x1075A, 0x109FB, 0x10CB9, 0x10F5A, 0x111FA, 0x114B9, 0x11759, 0x119F9,...
0x11C99, 0x11F38, 0x121B9, 0x12459, 0x126F8, 0x12979, 0x12BF9, 0x12E98,...
0x13118, 0x13398, 0x13618, 0x13898, 0x13B18, 0x13D97, 0x13FF8, 0x14277,...
0x144D8, 0x14757, 0x149B7, 0x14C17, 0x14E77, 0x150D7, 0x15337, 0x15596,...
0x157F6, 0x15A36, 0x15C96, 0x15ED6, 0x16116, 0x16356, 0x16596, 0x167D6,...
0x16A15, 0x16C55, 0x16E76, 0x170B5, 0x172D5, 0x17514, 0x17734, 0x17954,...
0x17B74, 0x17D93, 0x17F94, 0x181B4, 0x183B4, 0x185D3, 0x187D3, 0x189D3,...
0x18BD3, 0x18DD3, 0x18FD2, 0x191B3, 0x193B2, 0x19593, 0x19773, 0x19971,...
0x19B51, 0x19D31, 0x19EF2, 0x1A0D1, 0x1A292, 0x1A471, 0x1A631, 0x1A7F1,...
0x1A9B1, 0x1AB71, 0x1AD30, 0x1AED1, 0x1B090, 0x1B230, 0x1B3EF, 0x1B58F,...
0x1B72F, 0x1B8CF, 0x1BA50, 0x1BBEF, 0x1BD6F, 0x1BF0E, 0x1C08E, 0x1C20E,...
0x1C38E, 0x1C50D, 0x1C66E, 0x1C7ED, 0x1C94E, 0x1CAAE, 0x1CC0E, 0x1CD6E,...
0x1CECD, 0x1D02C, 0x1D16D, 0x1D2CC, 0x1D40C, 0x1D54C, 0x1D68C, 0x1D7CC,...
0x1D90B, 0x1DA2B, 0x1DB4C, 0x1DC8B, 0x1DDAB, 0x1DECA, 0x1DFEA, 0x1E0EB,...
0x1E20A, 0x1E30A, 0x1E429, 0x1E529, 0x1E629, 0x1E70A, 0x1E809, 0x1E908,...
0x1E9E9, 0x1EAC9, 0x1EBA9, 0x1EC88, 0x1ED68, 0x1EE47, 0x1EF08, 0x1EFC8,...
0x1F088, 0x1F166, 0x1F207, 0x1F2C7, 0x1F386, 0x1F426, 0x1F4C7, 0x1F567,...
0x1F606, 0x1F6A6, 0x1F745, 0x1F7C6, 0x1F865, 0x1F8E5, 0x1F965, 0x1F9E5,...
0x1FA64, 0x1FAC5, 0x1FB44, 0x1FBA4, 0x1FC04, 0x1FC64, 0x1FCC3, 0x1FD23,...
0x1FD63, 0x1FDC2, 0x1FE02, 0x1FE42, 0x1FE82, 0x1FEC1, 0x1FEE2, 0x1FF21,...
0x1FF41, 0x1FF61, 0x1FF81, 0x1FFA1, 0x1FFC0, 0x1FFC1, 0x1FFE0, 0x1FFE0];

plot(rom_sinbase);
title('Sine base ROM');

figure;
rom_sinint = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,...
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,...
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,...
0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,...
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,...
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,...
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,...
0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,...
0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,...
0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03,...
0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02,...
0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04,...
0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02,...
0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05,...
0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03,...
0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05,...
0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03,...
0x03, 0x04, 0x04, 0x05, 0x05, 0x05, 0x06, 0x06,...
0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03,...
0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07,...
0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04,...
0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08,...
0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04,...
0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x09,...
0x00, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x04,...
0x05, 0x06, 0x06, 0x07, 0x08, 0x08, 0x09, 0x09,...
0x00, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x05,...
0x05, 0x06, 0x07, 0x07, 0x08, 0x09, 0x09, 0x0A,...
0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x04, 0x05,...
0x06, 0x07, 0x07, 0x08, 0x09, 0x09, 0x0A, 0x0B,...
0x00, 0x01, 0x02, 0x02, 0x03, 0x04, 0x05, 0x05,...
0x06, 0x07, 0x08, 0x09, 0x09, 0x0A, 0x0B, 0x0C,...
0x00, 0x01, 0x02, 0x03, 0x03, 0x04, 0x05, 0x06,...
0x07, 0x08, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,...
0x00, 0x01, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06,...
0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0C, 0x0D,...
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,...
0x08, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,...
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,...
0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,...
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,...
0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x0F, 0x10,...
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x07, 0x08,...
0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,...
0x00, 0x01, 0x02, 0x03, 0x05, 0x06, 0x07, 0x08,...
0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x0F, 0x10, 0x11,...
0x00, 0x01, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08,...
0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x10, 0x11, 0x12,...
0x00, 0x01, 0x03, 0x04, 0x05, 0x06, 0x08, 0x09,...
0x0A, 0x0B, 0x0D, 0x0E, 0x0F, 0x10, 0x12, 0x13,...
0x00, 0x01, 0x03, 0x04, 0x05, 0x07, 0x08, 0x09,...
0x0A, 0x0C, 0x0D, 0x0E, 0x10, 0x11, 0x12, 0x14,...
0x00, 0x01, 0x03, 0x04, 0x05, 0x07, 0x08, 0x09,...
0x0B, 0x0C, 0x0E, 0x0F, 0x10, 0x12, 0x13, 0x14,...
0x00, 0x01, 0x03, 0x04, 0x06, 0x07, 0x08, 0x0A,...
0x0B, 0x0D, 0x0E, 0x0F, 0x11, 0x12, 0x14, 0x15,...
0x00, 0x01, 0x03, 0x04, 0x06, 0x07, 0x09, 0x0A,...
0x0C, 0x0D, 0x0F, 0x10, 0x12, 0x13, 0x14, 0x16,...
0x00, 0x02, 0x03, 0x05, 0x06, 0x08, 0x09, 0x0B,...
0x0C, 0x0E, 0x0F, 0x11, 0x12, 0x14, 0x15, 0x17,...
0x00, 0x02, 0x03, 0x05, 0x06, 0x08, 0x09, 0x0B,...
0x0D, 0x0E, 0x10, 0x11, 0x13, 0x14, 0x16, 0x17,...
0x00, 0x02, 0x03, 0x05, 0x06, 0x08, 0x0A, 0x0B,...
0x0D, 0x0F, 0x10, 0x12, 0x13, 0x15, 0x17, 0x18];

plot(rom_sinint);
title('Sine interpolation ROM');

for x = uint32(1):(uint32(0x5f) * uint32(0x8))
   rom_expfull(uint32(x)) = uint32(rom_expbase(uint32((x - 4) / uint32(0x8)) + 1)) + uint32(rom_expint(uint32(mod((x / uint32(0x40)), uint32(16)) * uint32(0x8) + mod(x, uint32(8)) + 1))) * uint32(16);
   rom_expfull_int(uint32(x)) = uint32(rom_expint(uint32(mod((x / uint32(0x40)), uint32(16)) * uint32(0x8) + mod(x, uint32(8)) + 1))) * uint32(16);
end

figure;
plot(rom_expfull);
hold on;
plot(rom_expfull_int);
title('Reconstructed exponential ROM');

for x = uint32(1):(uint32(0xff) * uint32(16))
   sin_expfull(uint32(x)) = uint32(rom_sinbase(uint32((x - 8) / uint32(16)) + 1)) + uint32(rom_sinint(uint32(mod((((uint32(0xf8) * uint32(16) + 1) - x) / uint32(0x100)), uint32(16)) * uint32(16) + mod(x, uint32(16)) + 1))) * uint32(64);
   sin_expfull_int(uint32(x)) = uint32(rom_sinint(uint32(mod((((uint32(0xf8) * uint32(16) + 1) - x) / uint32(0x100)), uint32(16)) * uint32(16) + mod(x, uint32(16)) + 1))) * uint32(64);
end

figure;
plot(sin_expfull);
hold on;
plot(sin_expfull_int);
title('Reconstructed sine ROM');